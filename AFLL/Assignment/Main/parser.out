Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> declaration
Rule 1     declaration -> variable_declaration
Rule 2     declaration -> type_declaration
Rule 3     variable_declaration -> LET ID optional_assignment SEMICOLON
Rule 4     variable_declaration -> CONST ID optional_assignment SEMICOLON
Rule 5     optional_assignment -> EQUAL expression
Rule 6     optional_assignment -> <empty>
Rule 7     type_declaration -> ID EQUAL expression SEMICOLON
Rule 8     expression -> NUMBER
Rule 9     expression -> STRING
Rule 10    expression -> BOOLEAN
Rule 11    expression -> ID
Rule 12    expression -> ARRAY

Terminals, with rules where they appear

ARRAY                : 12
BOOLEAN              : 10
CONST                : 4
EQUAL                : 5 7
ID                   : 3 4 7 11
LET                  : 3
NUMBER               : 8
SEMICOLON            : 3 4 7
STRING               : 9
error                : 

Nonterminals, with rules where they appear

declaration          : 0
expression           : 5 7
optional_assignment  : 3 4
type_declaration     : 2
variable_declaration : 1

Parsing method: LALR

state 0

    (0) S' -> . declaration
    (1) declaration -> . variable_declaration
    (2) declaration -> . type_declaration
    (3) variable_declaration -> . LET ID optional_assignment SEMICOLON
    (4) variable_declaration -> . CONST ID optional_assignment SEMICOLON
    (7) type_declaration -> . ID EQUAL expression SEMICOLON

    LET             shift and go to state 4
    CONST           shift and go to state 6
    ID              shift and go to state 5

    declaration                    shift and go to state 1
    variable_declaration           shift and go to state 2
    type_declaration               shift and go to state 3

state 1

    (0) S' -> declaration .



state 2

    (1) declaration -> variable_declaration .

    $end            reduce using rule 1 (declaration -> variable_declaration .)


state 3

    (2) declaration -> type_declaration .

    $end            reduce using rule 2 (declaration -> type_declaration .)


state 4

    (3) variable_declaration -> LET . ID optional_assignment SEMICOLON

    ID              shift and go to state 7


state 5

    (7) type_declaration -> ID . EQUAL expression SEMICOLON

    EQUAL           shift and go to state 8


state 6

    (4) variable_declaration -> CONST . ID optional_assignment SEMICOLON

    ID              shift and go to state 9


state 7

    (3) variable_declaration -> LET ID . optional_assignment SEMICOLON
    (5) optional_assignment -> . EQUAL expression
    (6) optional_assignment -> .

    EQUAL           shift and go to state 11
    SEMICOLON       reduce using rule 6 (optional_assignment -> .)

    optional_assignment            shift and go to state 10

state 8

    (7) type_declaration -> ID EQUAL . expression SEMICOLON
    (8) expression -> . NUMBER
    (9) expression -> . STRING
    (10) expression -> . BOOLEAN
    (11) expression -> . ID
    (12) expression -> . ARRAY

    NUMBER          shift and go to state 14
    STRING          shift and go to state 15
    BOOLEAN         shift and go to state 16
    ID              shift and go to state 12
    ARRAY           shift and go to state 17

    expression                     shift and go to state 13

state 9

    (4) variable_declaration -> CONST ID . optional_assignment SEMICOLON
    (5) optional_assignment -> . EQUAL expression
    (6) optional_assignment -> .

    EQUAL           shift and go to state 11
    SEMICOLON       reduce using rule 6 (optional_assignment -> .)

    optional_assignment            shift and go to state 18

state 10

    (3) variable_declaration -> LET ID optional_assignment . SEMICOLON

    SEMICOLON       shift and go to state 19


state 11

    (5) optional_assignment -> EQUAL . expression
    (8) expression -> . NUMBER
    (9) expression -> . STRING
    (10) expression -> . BOOLEAN
    (11) expression -> . ID
    (12) expression -> . ARRAY

    NUMBER          shift and go to state 14
    STRING          shift and go to state 15
    BOOLEAN         shift and go to state 16
    ID              shift and go to state 12
    ARRAY           shift and go to state 17

    expression                     shift and go to state 20

state 12

    (11) expression -> ID .

    SEMICOLON       reduce using rule 11 (expression -> ID .)


state 13

    (7) type_declaration -> ID EQUAL expression . SEMICOLON

    SEMICOLON       shift and go to state 21


state 14

    (8) expression -> NUMBER .

    SEMICOLON       reduce using rule 8 (expression -> NUMBER .)


state 15

    (9) expression -> STRING .

    SEMICOLON       reduce using rule 9 (expression -> STRING .)


state 16

    (10) expression -> BOOLEAN .

    SEMICOLON       reduce using rule 10 (expression -> BOOLEAN .)


state 17

    (12) expression -> ARRAY .

    SEMICOLON       reduce using rule 12 (expression -> ARRAY .)


state 18

    (4) variable_declaration -> CONST ID optional_assignment . SEMICOLON

    SEMICOLON       shift and go to state 22


state 19

    (3) variable_declaration -> LET ID optional_assignment SEMICOLON .

    $end            reduce using rule 3 (variable_declaration -> LET ID optional_assignment SEMICOLON .)


state 20

    (5) optional_assignment -> EQUAL expression .

    SEMICOLON       reduce using rule 5 (optional_assignment -> EQUAL expression .)


state 21

    (7) type_declaration -> ID EQUAL expression SEMICOLON .

    $end            reduce using rule 7 (type_declaration -> ID EQUAL expression SEMICOLON .)


state 22

    (4) variable_declaration -> CONST ID optional_assignment SEMICOLON .

    $end            reduce using rule 4 (variable_declaration -> CONST ID optional_assignment SEMICOLON .)

